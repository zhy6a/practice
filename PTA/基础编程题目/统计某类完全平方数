本题要求实现一个函数，判断任一给定整数N是否满足条件：它是完全平方数，又至少有两位数字相同，如144、676等。
#include <stdio.h>
#include <math.h>

int IsTheNumber ( const int N );

int main()
{
    int n1, n2, i, cnt;
    
    scanf("%d %d", &n1, &n2);
    cnt = 0;
    for ( i=n1; i<=n2; i++ ) {
        if ( IsTheNumber(i) )
            cnt++;
    }
    printf("cnt = %d\n", cnt);

    return 0;
}

/* 你的代码将被嵌在这里 */

int IsTheNumber(const int N) {
    int num = N, temp, array[10] = {0}, numSqrt = sqrt(num);
    if (numSqrt * numSqrt == num) {
        while (num) {
            temp = num % 10;
            array[temp]++;
            num /= 10;
        }
        for (int i = 0; i <= 9; i++) {
            if (array[i] > 1) {
                return 1;
            }
        }
    }
    return 0;
}

/*另一种方法*/

int IsTheNumber(const int N)
{
    int M=N;//因为给的N是const修饰，无法修改，所以将M=N，用于获取每一位数字
    int i,j=0;
    int a[10];//定义存储每一位数字的数组
 
    while(M>=10)
    {
        a[j++]=M%10;//将除最高位之外的每一位数字存储到数组中
        M=M/10;
    }
    a[j]=M;//最后将最高的那位数字存储到数组中
 
    int x=(int)sqrt(N);//将N开平方时候强转成int
    int y=x*x;//计算x的平方
 
    int m,n;
    for(m=0; m<=j; m++)
    {
        for(n=m+1; n<=j; n++)
        {
            //两次循环数组，注意n是从m+1开始的，也就是只与其后边的比较即可
            if(a[m]==a[n])//如果出现了一组相同的数字
            {
 
                if(y==N)//然后判断N是否是完全平方数
                {
                    return 1;//直接就返回1
                }
                else
                {
                    return 0;
                }
 
            }
        }
    }
 
    return 0;
}
